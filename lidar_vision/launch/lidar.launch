<!-- Launch file for lidar-->
<!-- This launch file should be run after dynamixel's because the specified nodes
        require params from dynamixel -->


<launch>
    <!-- args-->
    
    <!-- Euclidean clustering node -->
    <!-- simulate turns the lidar driver off if true -->
    <arg name="simulate" default="false"/> 
    <!-- cluster_tolerance is the max allowable distance in meters between points -->
    <arg name="cluster_tolerance" default="0.75"/>
    <!-- min_cluster_size is the smallest number of points alowed in a cluster -->
    <arg name="min_cluster_size" default="1"/>
    <!-- max_cluster_size is the largest number of points in one cluster bounded by the size of an int-->
    <arg name="max_cluster_size" default="2147483647"/>
    
    <!-- Feture extraction -->
    <!-- distance_threshold is um for feture extraction TODO: figure out what this does -->
    <arg name="distance_threshold" default="0.1"/>
    <!-- max_iterations is the maximum number of itterations to be performed in the Random sample consensus algorithim for feture extraction -->
    <arg name="max_iterations" default="1000"/>
    <!-- probability is the ... um... for feture extraction TODO: figure out what this does -->
    <arg name="probability" default="0.99"/>
    <!-- max_buoy_radius is the maximum radius in meters to accept a pc as a buoy -->
    <arg name="max_buoy_radius" default="0.25"/>

    <!-- group to put every thing related to lidar in-->
    <group ns="lidar">
	<!-- Lidar driver -->
        <node unless="$(arg simulate)" pkg="lms1xx" type="LMS1xx_node" name="lms1xx">
            <!--Lidars IP address-->
            <param name="host" value="192.168.2.4"/>
            <!--The frame for tf transforms -->
            <param name="frame_id" value="lidar"/>
        </node>
        
        <!-- Controls the angle of the dynamixel servo that moves the lidar -->
        <node pkg="lidar_vision" type="lidar_control_node" name="lidar_angle_control"/>
	
        <!-- Converts a sensor_msgs::laser_scan to sensor_msgs::point_cloud2 -->
	<node pkg="lidar_vision" type="laser_to_pc_node" name="laser_to_pc_node"/>
        
        <!-- Performs a segmentation based on euclidean spatial distances -->
	<node pkg="lidar_vision" type="euclidean_pc_segmentation_node" name="euclidean_pc_segmentation_node">
            <rosparam subst_value="true">
                euclidean_cluster_tolerance: $(arg cluster_tolerance)
                euclidean_min_cluster_size: $(arg min_cluster_size)
                euclidean_max_cluster_size: $(arg max_cluster_size)
            </rosparam>
         </node>

         <node pkg="lidar_vision" type="feature_extractor_node" name="feature_extractor_node">
            <rosparam subst_value="true">
                distance_threshold: $(arg distance_threshold)
                max_iterations: $(arg max_iterations)
                probability: $(arg probability)
                max_buoy_radius: $(arg max_buoy_radius)
            </rosparam>
	 </node>
    </group>
</launch>
