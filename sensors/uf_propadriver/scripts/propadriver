#!/usr/bin/env python

import struct
import sys
import time
import threading

import serial

import roslib
roslib.load_manifest('uf_propadriver')
import rospy
from thruster_handling.broadcaster import ThrusterBroadcaster
from kill_handling.listener import KillListener

rospy.init_node('propadriver')

class PropaDriver(object):
    def __init__(self, port):
        self._rs485 = serial.Serial(port=port, baudrate=115200)
        self._velocities = [0, 0, 0, 0]
        self._killed = False
        
        t = threading.Thread(target=self._send_thread)
        t.setDaemon(True)
        t.start()
    
    def _send_thread(self):
        while True:
          time.sleep(.1)
          self._send_update()
    
    def _send_update(self):
        data = '*'
        for i, vel in zip([1, 2, 3, 4], self._velocities):
            data += 'M%i%+05i,' % (i, vel*2000)
        data += ('K' if self._killed else 'U') + ','
        data += '~'
        
        print repr(data)
        
        self._rs485.write(data)
    
    def set_velocity(self, motor, velocity):
        assert abs(velocity) <= 1
        assert 1 <= motor <= 4
        self._velocities[motor-1] = velocity
    
    def set_killed(self, killed):
        self._killed = killed


pd = PropaDriver(rospy.get_param('~port'))

frame_id = rospy.get_param('~frame_id')

def init_motor(i):
    conf = rospy.get_param('~m' + str(i))
    
    info_period = rospy.Duration(1)
    thruster_broadcaster = ThrusterBroadcaster(
        frame_id=frame_id,
        id=conf['id'],
        lifetime=info_period * 2,
        position=conf['position'],
        direction=conf['direction'],
        min_force=-conf['rev_force'],
        max_force=+conf['fwd_force'],
        torque_per_force=[0, 0, 0],
        command_callback=lambda force: pd.set_velocity(i,
            min(1, force/conf['fwd_force']) if force >= 0 else
            max(-1, force/conf['rev_force'])
        ),
    )
    rospy.Timer(info_period, lambda timerevent: thruster_broadcaster.send())

for i in [1, 2, 3, 4]:
    init_motor(i)


kill_listener = KillListener(
    killed_callback=lambda: pd.set_killed(True),
    unkilled_callback=lambda: pd.set_killed(False),
)


rospy.spin()
