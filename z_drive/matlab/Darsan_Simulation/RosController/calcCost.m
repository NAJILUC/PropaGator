function output = calcCost(input, preinput, force_bow_required, force_port_required, moment_z_required, port_servo_x_offset, starboard_servo_x_offset, port_servo_y_offset, starboard_servo_y_offset, gain, m, I)

    port_servo_angle  = input(1);
    port_thruster_force      = input(2);
    starboard_servo_angle  = input(3);
    starboard_thruster_force      = input(4);
    
    current_port_servo_angle   = preinput(1);
    current_starboard_servo_angle   = preinput(3);

    resultantForceX = (port_thruster_force*cos(port_servo_angle) + starboard_thruster_force*cos(starboard_servo_angle));
    resultantForceY = (port_thruster_force*sin(port_servo_angle) + starboard_thruster_force*sin(starboard_servo_angle));
    resultantMomentZ = (-port_servo_x_offset*port_thruster_force*sin(port_servo_angle) + port_servo_y_offset*port_thruster_force*cos(port_servo_angle)... 
        - starboard_servo_x_offset*starboard_thruster_force*sin(starboard_servo_angle) + starboard_servo_y_offset*starboard_thruster_force*cos(starboard_servo_angle));
    
    
   output = gain.error_force_x/2               * (resultantForceX-force_bow_required)^2 +...
        gain.error_force_y/2                    * (resultantForceY-force_port_required)^2 +...
        gain.error_moment_z/2                   * (resultantMomentZ-moment_z_required)^2  +...
        gain.thruster_force/2                   * port_thruster_force^2 +...
        gain.thruster_force/2                   * starboard_thruster_force^2 +...
        gain.deviation_equilibrum_servo_angle/2 * port_servo_angle^2 +...
        gain.deviation_equilibrum_servo_angle/2 * starboard_servo_angle^2 +...
        gain.deviation_changeof_servo_angle/2   * (port_servo_angle - current_port_servo_angle)^2 +...
        gain.deviation_changeof_servo_angle/2   * (starboard_servo_angle - current_starboard_servo_angle)^2;

end

