#!/usr/bin/env python
PACKAGE = "z_drive"
from math import *
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#the following are simple defines that are used bellow so darsan can easily set the initial values on the dyn. param server (when rose core starts up)
boat_mass = 46.27
boat_inertia = 7.5350
port_servo_x_offset = -.6350
port_servo_y_offset = .2921
starboard_servo_x_offset = -.6350
starboard_servo_y_offset = -.2921
p_gain_x = 100
d_gain_x = 60
p_gain_y = 100
d_gain_y = 60
p_gain_theta_boat = 50
d_gain_theta_boat = 25
gain_error_force_x = 1000
gain_error_force_y = 1000
gain_error_moment_z = 60000
gain_thrusters_force = 10
gain_deviation_equilibrum_servo_angle = 0
gain_deviation_changeof_servo_angle = 1
port_thruster_foward_limit = 39
port_thruster_reverse_limit = -22.5
starboard_thruster_foward_limit = 39
starboard_thruster_reverse_limit = -22.5

#gen.add takes the folowing:
#name - a string which specifies the name under which this parameter should be stored. NOTE: the name can't be "i" "state" or "name"
#type - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
#level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are OR(ed) together and the resulting value is passed to the callback.
#			driver_base/SensorLevels.msg defines the levels (0=running,1=stopped,3=closed) see: http://goo.gl/JdzhVp
#description - string which describes the parameter
#default - specifies the default value
#min - specifies the min value (optional and does not apply to strings and bools)
#max - specifies the max value (optional and does not apply to strings and bools)

control_enum = gen.enum([ gen.const("xbox_analog_only", int_t, 0, "XBOX Analog Sticks Only"),
					gen.const("xbox_analog_to_required", int_t, 1, "XBOX Analog Sticks map to Required Force"),
					gen.const("waypoint_driving", int_t, 2, "Waypoint Driving"),
					gen.const("manual_mode", int_t, 3, "Drive based on manually configured setting below"),
					gen.const("cost_dbg_mode", int_t, 4, "The thrusters and servors mirror each other and do the same thing"),
					gen.const("manual_to_required", int_t, 5, "manually enter the required forces"),
					gen.const("testing_mode", int_t, 6, "A random mode that is used for testing things"),
					gen.const("mirror_mode", int_t, 7, "A mode used to debug the cost function"),
					gen.const("extra_8", int_t, 8, "A extra mode"),
					gen.const("extra_9", int_t, 9, "A extra mode"),
					gen.const("extra_10", int_t, 10, "A extra mode"),
					gen.const("extra_11", int_t, 11, "A extra mode"),
					gen.const("extra_12", int_t, 12, "A extra mode"),
					gen.const("extra_13", int_t, 13, "A extra mode"),
					gen.const("extra_14", int_t, 14, "A extra mode")],
					"An enum of the controller Type that should be used to drive the boat")

gen.add("control_method", int_t, 0, "Control Method to drive the boat", 0, 0, 6, edit_method=control_enum)
gen.add("kill_thrusters", bool_t, 0, "Turn off Thrusters",False)

gen.add("update_rate", double_t, 0, "The rate in Hz that the processes callbacks", 50, 0, 100)

gen.add("boat_mass", double_t, 0, "The mass of the boat in Kg", boat_mass, 0, 100)
gen.add("boat_inertia", double_t, 0, "Inertia of the boat in (m^2)/kg", boat_inertia, 0, 100)

# these are the frictional forces acting on the boat relative to its velocity
gen.add("friction_coefficient_forward", double_t, 0, "Coefficient of friction of the boat relative to the watter against its forward movement in kg/s", 4.0181, 0, 10)
gen.add("friction_coefficient_forward_reduction", double_t, 0, "The amount that the frictional forces get reduced in the forward direction as the boat moves faster in kg/m", 0.76462, 0, 10)
gen.add("friction_coefficient_lateral", double_t, 0, "Coefficient of friction of the boat relative to the watter against its lateral movement in kg/s", 2, 0, 10)
gen.add("friction_coefficient_lateral_reduction", double_t, 0, "The amount that the frictional forces get reduced in the lateral direction as the boat moves faster in kg/m", 0, 0, 10)
gen.add("friction_coefficient_rotational", double_t, 0, "Coefficient of friction of the boat relative to the watter against its rotational movement in kg/s", 1.3321, 0, 10)
gen.add("friction_coefficient_rotational_reduction", double_t, 0, "The amount that the frictional forces get reduced in the rotational direction as the boat moves faster in kg/m", 0, 0, 10)

#port servo offsets remember according to ros rep 103: x=forward, y=left,	z=up
#port_servo is back .7239m, left of centerline .3048m, 0m above the water
gen.add("port_servo_x_offset", double_t, 0, "", port_servo_x_offset, -20, 20)
gen.add("port_servo_y_offset", double_t, 0, "", port_servo_y_offset, -20, 20)
gen.add("port_servo_z_offset", double_t, 0, "", 0, -20, 20)
#starboard_servo is back .7239m, right of center line .3048m, 0m above the water
gen.add("starboard_servo_x_offset", double_t, 0, "", starboard_servo_x_offset, -20, 20)
gen.add("starboard_servo_y_offset", double_t, 0, "", starboard_servo_y_offset, -20, 20)
gen.add("starboard_servo_z_offset", double_t, 0, "", 0, -20, 20)

# These are the tunable gain parameters for the "pd" controller.
gen.add("p_gain_x", double_t, 0, "", p_gain_x, 0, 1000)
gen.add("d_gain_x", double_t, 0, "", d_gain_x, 0, 1000)
gen.add("p_gain_y", double_t, 0, "", p_gain_y, 0, 1000)
gen.add("d_gain_y", double_t, 0, "", d_gain_y, 0, 1000)
gen.add("p_gain_theta_boat", double_t, 0, "", p_gain_theta_boat, 0, 1000)
gen.add("d_gain_theta_boat", double_t, 0, "", d_gain_theta_boat, 0, 1000)

# these are gains for the cost function
gen.add("gain_error_force_x", double_t, 0, "", gain_error_force_x, 0, 1000)
gen.add("gain_error_force_y", double_t, 0, "", gain_error_force_y, 0, 1000)
gen.add("gain_error_moment_z", double_t, 0, "", gain_error_moment_z, 0, 60000)
gen.add("gain_thrusters_force", double_t, 0, "", gain_thrusters_force, 0, 1000)
gen.add("gain_deviation_equilibrum_servo_angle", double_t, 0, "", gain_deviation_equilibrum_servo_angle, 0, 1000)
gen.add("gain_deviation_changeof_servo_angle", double_t, 0, "", gain_deviation_changeof_servo_angle, 0, 1000)

gen.add("step_size", double_t, 0, "", 100, 0, 1000)
gen.add("step_multiplier", double_t, 0, "", 100, 0, 1000)

gen.add("cost_count_max", double_t, 0, "", 100, 0, 1000)


#both thrusters combined generate about 80.0679891 Newtons
gen.add("port_servo_angle_offset", double_t, 0, "", pi, 0, 2*pi)
gen.add("port_servo_angle_clock_wise_limit", double_t, 0, "", (-70*pi)/180, -pi, pi)
gen.add("port_servo_angle_counter_clock_wise_limit", double_t, 0, "", (100*pi)/180, -pi, pi)
gen.add("port_thruster_foward_limit", double_t, 0, "", port_thruster_foward_limit, -100, 100)
gen.add("port_thruster_reverse_limit", double_t, 0, "", port_thruster_reverse_limit, -100, 100)
gen.add("starboard_servo_angle_offset", double_t, 0, "", pi, 0, 2*pi)
gen.add("starboard_servo_angle_clock_wise_limit", double_t, 0, "", (-100*pi)/180, -pi, pi)
gen.add("starboard_servo_angle_counter_clock_wise_limit", double_t, 0, "", (70*pi)/180, -pi, pi)
gen.add("starboard_thruster_foward_limit", double_t, 0, "", starboard_thruster_foward_limit, -100, 100)
gen.add("starboard_thruster_reverse_limit", double_t, 0, "", starboard_thruster_reverse_limit, -100, 100)

gen.add("manual_port_servo_angle",int_t, 0, "", 0, -180, 180)
gen.add("manual_port_thruster_force", int_t, 0, "", 0, -100, 100)
gen.add("manual_starboard_servo_angle",int_t, 0, "", 0, -180, 180)
gen.add("manual_starboard_thruster_force", int_t, 0, "", 0, -100, 100)

gen.add("manual_force_bow_required",int_t, 0, "", 0, -100, 100)
gen.add("manual_force_port_required",int_t, 0, "", 0, -100, 100)
gen.add("manual_moment_z_required",int_t, 0, "", 0, -20, 20)


gen.const("int_const", int_t, 5, "An int constant.")
gen.const("double_const", double_t, 5.6, "A double constant.")
gen.const("str_const", str_t, "foo", "A string constant.")
gen.const("bool_const", bool_t, True, "A bool constant.")

enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
gen.const("Medium", int_t, 1, "A medium value"),
gen.const("Large", int_t, 2, "A large value"),
gen.const("ExtraLarge", int_t, 3, "An extra large value") ], "An enum to set the size.")

gen.add("int_enum_", int_t, 1, "Int enum",0, 0, 3, edit_method = enum)
gen.add("int_", int_t, 1, "Int parameter",0, -10, 10)
gen.add("double_", double_t, 2, "double parameter",0, -2, 10)
gen.add("str_", str_t, 4, "String parameter","foo")
gen.add("bool_", bool_t, 8, "Boolean parameter",False)
#group1 = gen.add_group("Group One", state = True)
#group1.add("group1_int", int_t, 1, "A second level group parameter", 2)

#tell the generator to generate the necessary files and exit the program.
#The second parameter is the name of a node this could run in (used to generate documentation only), the third parameter is a name prefix the generated files will get (e.g. "<name>Config.h" for c++, or "<name>Config.py" for python.)
# NOTE: The third parameter should be equal to the cfg file name, without extension. Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them.
exit(gen.generate(PACKAGE, "z_drive", "Gains"))

# NOTE: be sure to make this cfg file executable with: chmod a+x cfg/Gains.cfg