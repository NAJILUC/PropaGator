<?xml version="1.0"?>
<robot xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
	 xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
	 xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
	 xmlns:xacro="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface" name="z_drive_system">

<!-- This file describes a simple Unified Robot Description Format (URDF) for the z_drive system, that is generated by Xacro (XML Macros) language -->
<!-- To generate a URDF from this file run "rosrun xacro xacro.py z_drive.xacro > z_drive_xacro_generated.urdf"-->
<!-- To see a simple interaction of it, start "roscore" and then run the command "roslaunch urdf_tutorial display.launch model:=z_drive_xacro_generated.urdf gui:=true" -->
<!-- For more info on URDF tags see: http://wiki.ros.org/urdf/XML-->
<!-- For more info on xacro see: http://goo.gl/nE33uo or http://wiki.ros.org/xacro -->

<!-- These folowing defined macro(s) will be used to automaticly create the z_drive system -->
<!-- Macro constants -->
<xacro:property name="system_name" value="z_drive" />
<xacro:property name="pi" value="3.1415926535897931" />
<!-- Default Materials that are used -->
<material name="blue">
	<color rgba="0 0 1 .125"/>
</material>
<material name="red">
	<color rgba="1.0 0 0 .5"/>
</material>
<material name="green">
	<color rgba="0 1 0 .5"/>
</material>
<!-- Link Macros -->
<!-- the visual_geometry can be made of a mesh that is very detailed. -->
<xacro:macro name="thruster_visual_model" params="color">
	<material name="${color}"/>
	<geometry>
		<box size=".5 .25 .25" />
	</geometry>
</xacro:macro>
<!-- collision_geometry should be as simple as possible.-->
<xacro:macro name="thruster_collision_model">
	<geometry>
		<box size=".5 .25 .25" />
	</geometry>
</xacro:macro>
<xacro:macro name="prop_visual_model" params="color">
	<material name="${color}"/>
	<!-- the prop is at the end of the thruster body and is rotated-->
	<origin xyz="-.25 0 0" rpy="0 ${pi/2} 0"/>
	<geometry>
		<cylinder length="0.1" radius="0.125" />
	</geometry>
</xacro:macro>
<!-- Macro to create an entire thruster. Note: the "*origin" should be a URDF "origin" tag that is the location of the thruster relative to the base_link -->
<xacro:macro name="thruster" params="location color *origin">
	<link name="${location}_thruster">
		<visual>
			<xacro:thruster_visual_model color="${color}" />
		</visual>
		<collision>
			<xacro:thruster_collision_model />
		</collision>
	</link>
	<link name="${location}_prop">
		<visual>
			<xacro:prop_visual_model color="${color}"/>
		</visual>
	</link>
	<joint name="${location}_servo" type="revolute">
		<parent link="${system_name}_base"/>
		<child link="${location}_thruster"/>
		<xacro:insert_block name="origin" />
		<axis xyz="0 0 1" />
		<limit lower="0" upper="6.283185" velocity="6.597344565" effort="6.0" />
	</joint>
	<joint name="${location}_thruster_to_prop" type="prismatic">
		<parent link="${location}_thruster"/>
		<child link="${location}_prop"/>
		<origin xyz="0 0 0" rpy="0 0 0" />
		<axis xyz="-1 0 0" />
		<limit lower="0" upper="1" velocity="1" effort="1" />
	</joint>
</xacro:macro>

   <!-- start of the urdf that will be generated -->
   
	<link name="base_link">
		<visual>
			<geometry>
				<box size="3 2 1" />
			</geometry>
			<material name="blue"/>
		</visual>
	</link>
	
	<!-- the "${system_name}_base" will be instantiated from the base_link of the robot-->
	<link name="${system_name}_base"/>
	<!-- to instantiate the "${system_name}_base" from the base_link of the robot we need a fixed joint-->
	<joint name="base_link_to_${system_name}_base" type="fixed">
		<parent link="base_link"/>
		<child link="${system_name}_base"/>
		<origin xyz="0 0 0"/>
	</joint>
	
	<!-- create a port servo located at the specified location-->
	<xacro:thruster location="port" color="red" >
		<origin xyz="-.7239 .3048 0" rpy="0 0 0" />
	</xacro:thruster>
	
	<!-- create a starboard servo located at the specified location-->
	<xacro:thruster location="starboard" color="green">
		<origin xyz="-.7239 -.3048 0" rpy="0 0 0" />
	</xacro:thruster>

</robot>