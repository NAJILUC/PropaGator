#!/usr/bin/python

from __future__ import division

import math
import itertools
import signal
import traceback

from twisted.internet import reactor, defer
import numpy
import scipy.optimize

import txros
from txros import util
from uf_common.orientation_helpers import xyz_array

from geometry_msgs.msg import WrenchStamped

from motor_control.msg import thrusterConfig
from dynamixel_servo.msg import DynamixelContinuousAngleConfig


def lstsq_box(A, b, x_mins, x_maxs):
    return scipy.optimize.fmin_slsqp(
        func=lambda x: numpy.linalg.norm(A.dot(x) - b)**2,
        x0=(x_mins + x_maxs)/2,
        bounds=zip(x_mins, x_maxs),
        fprime=lambda x: 2*A.T.dot(A.dot(x) - b),
        disp=0,
    )

def get_optimal_angles(thrusters, wrench):
    wrench = numpy.concatenate(wrench)
    
    wrench_from_efforts = numpy.array([numpy.concatenate([
        [1, 0, 0], # force = direction * effort
        numpy.cross(thruster['position'], [1, 0, 0]), # torque = (position X direction) * effort
    ]) for thruster in thrusters] + [numpy.concatenate([
        [0, 1, 0], # force = direction * effort
        numpy.cross(thruster['position'], [0, 1, 0]), # torque = (position X direction) * effort
    ]) for thruster in thrusters]).T
    
    pseudowrench_from_wrench = numpy.diag([1, 1, 0, 0, 0, 1])
    pseudowrench = pseudowrench_from_wrench.dot(wrench)
    pseudowrench_from_efforts = pseudowrench_from_wrench.dot(wrench_from_efforts)
    
    efforts, _, _, _ = numpy.linalg.lstsq(pseudowrench_from_efforts, pseudowrench)
    error = numpy.linalg.norm(pseudowrench_from_efforts.dot(efforts) - pseudowrench)
    
    return [math.atan2(efforts[i + len(thrusters)], efforts[i]) for i in xrange(len(thrusters))]

def _fit(thrusters, wrench):
    wrench = numpy.concatenate(wrench)
    
    calc_direction = lambda angle: numpy.array([math.cos(angle), math.sin(angle), 0])
    wrench_from_efforts = numpy.array([numpy.concatenate([
        calc_direction(thruster['angle']), # force = direction * effort
        numpy.cross(thruster['position'], calc_direction(thruster['angle'])), # torque = (position X direction) * effort
    ]) for thruster in thrusters]).T
    
    pseudowrench_from_wrench = numpy.diag([1, 1, 0, 0, 0, 1])
    pseudowrench = pseudowrench_from_wrench.dot(wrench)
    pseudowrench_from_efforts = pseudowrench_from_wrench.dot(wrench_from_efforts)
    
    efforts = lstsq_box(pseudowrench_from_efforts, pseudowrench,
        numpy.array([thruster['thrust_range'][0] for thruster in thrusters]),
        numpy.array([thruster['thrust_range'][1] for thruster in thrusters]))
    error = numpy.linalg.norm(pseudowrench_from_efforts.dot(efforts) - pseudowrench)
    return efforts, (error, sum(abs(effort)**(3/2) for effort in efforts))

def clip(x, (inf, sup)):
    if x < inf: return inf
    if x > sup: return sup
    return x

def lerp(x, (inf, sup)):
    if x < 0 or x > 1: print 'warning - lerp argument is outside of normal range'
    return inf*(1-x) + sup*x

def gen_new_thrusters(thrusters, delta_angles):
    x = map(dict, thrusters) # clone
    for thruster, delta_angle in zip(x, delta_angles):
        thruster['angle'] = thruster['angle'] + delta_angle
    return x

class Node(object):
    def __init__(self):
        self.nh = txros.NodeHandle.from_argv('testnode', anonymous=True)
        self.wrench_sub = self.nh.subscribe('wrench', WrenchStamped, self._wrench_cb)
        #self.pub = self.nh.advertise('point2', PointStamped, latching=True)
        
        self.wrench = numpy.zeros(3), numpy.zeros(3)
        
        self.thrusters = [
            dict( # port
                id=3,
                position=numpy.array([-.7239, +.3048, -.5]),
                angle=0,
                thrust_range=(-50, +50),
                dangle_range=(-3.2e-0, +3.2e-0),
                angle_range=(-6*math.pi, +6*math.pi), # at most (-6*math.pi, +6*math.pi)
            ),
            dict( # starboard
                id=2,
                position=numpy.array([-.7239, -.3048, -.5]),
                angle=0,
                thrust_range=(-50, +50),
                dangle_range=(-3.2e-0, +3.2e-0),
                angle_range=(-6*math.pi, +6*math.pi), # at most (-6*math.pi, +6*math.pi)
            ),
        ]
        
        self.thrust_pub = self.nh.advertise('thruster_config', thrusterConfig)
        self.servo_pub = self.nh.advertise('dynamixel/dynamixel_continuous_config', DynamixelContinuousAngleConfig)
    
    def _wrench_cb(self, msg):
        self.wrench = xyz_array(msg.wrench.force), xyz_array(msg.wrench.torque)
    
    @util.cancellableInlineCallbacks
    def think(self):
        dt = 1/50
        tt = 0
        try:
            while True:
                tt += dt
                #self.wrench = (20*math.cos(2*math.pi*tt/20), 20*math.sin(2*math.pi*tt/20), 0), (0, 0, 0)
                
                optimal_angles = get_optimal_angles(self.thrusters, self.wrench)
                
                dangles = []
                for thruster, optimal_angle in zip(self.thrusters, optimal_angles):
                    allowed_angle = optimal_angle
                    while allowed_angle > thruster['angle_range'][1]: allowed_angle -= math.pi
                    while allowed_angle < thruster['angle_range'][0]: allowed_angle += math.pi
                    assert thruster['angle_range'][0] <= allowed_angle <= thruster['angle_range'][1]
                    possibilities = [allowed_angle]
                    for i in itertools.count(1):
                        x = allowed_angle + math.pi * i
                        if x > thruster['angle_range'][1]: break
                        possibilities.append(x)
                    for i in itertools.count(1):
                        x = allowed_angle - math.pi * i
                        if x < thruster['angle_range'][0]: break
                        possibilities.append(x)
                    
                    center = (thruster['angle_range'][0] + thruster['angle_range'][1])/2
                    angle_range = thruster['angle_range'][1] - thruster['angle_range'][0]
                    max_dist = lerp(abs(thruster['angle'] - center)/(angle_range/2), (math.pi/2, math.pi))
                    
                    desired_angle = min([p for p in possibilities if abs(p - thruster['angle']) <= max_dist],
                        key=lambda angle: abs(angle))
                    
                    assert thruster['angle_range'][0] <= desired_angle <= thruster['angle_range'][1]
                    
                    dangle = clip((desired_angle - thruster['angle']) / dt, thruster['dangle_range'])
                    dangles.append(dangle)
                self.thrusters = gen_new_thrusters(self.thrusters, numpy.array(dangles) * dt)
                
                efforts, error = _fit(self.thrusters, self.wrench)
                for thruster, effort, dangle in zip(self.thrusters, efforts, dangles):
                    self.servo_pub.publish(DynamixelContinuousAngleConfig(
                        id=thruster['id'],
                        goal_position=2*thruster['angle'] + math.pi,
                        goal_velocity=2*dangle,
                    ))
                    self.thrust_pub.publish(thrusterConfig(
                        id=thruster['id'],
                        thrust=effort,
                    ))
                
                print self.wrench
                print dangles
                print [t['angle'] for t in self.thrusters], efforts, error
                print
                
                yield util.sleep(dt)
        finally:
            for thruster, effort, dangle in zip(self.thrusters, efforts, dangles):
                self.servo_pub.publish(DynamixelContinuousAngleConfig(
                    id=thruster['id'],
                    goal_position=2*0 + math.pi,
                    goal_velocity=2*0,
                ))
                self.thrust_pub.publish(thrusterConfig(
                    id=thruster['id'],
                    thrust=0,
                ))

@util.cancellableInlineCallbacks
def main():
    try:
        n = Node()
        yield n.think()
    except Exception:
        traceback.print_exc()
    finally:
        reactor.stop()

def _start():
    signal.signal(signal.SIGINT, lambda signum, frame: reactor.callFromThread(task.cancel))
    task = main().addErrback(lambda fail: fail.trap(defer.CancelledError))
reactor.callWhenRunning(_start)
reactor.run()
