#!/usr/bin/env python

from __future__ import division

import math
import numpy
import random
import traceback
import rospy

import ode
import pygame
from OpenGL.GL import *
from OpenGL.GLU import *
from twisted.internet import protocol, reactor, task

import roslib
roslib.load_manifest('boatsim')
import rospy
import tf
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Vector3, Quaternion, WrenchStamped
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Float64
from std_msgs.msg import Header
from uf_common import interpolate
from sim import threed, vector, util
from sim.vector import v, V
from motor_control.msg import thrusterNewtons
from dynamixel_servo.msg import DynamixelJointConfig, DynamixelFullConfig, DynamixelStatus
from z_drive.msg import BoatSimZDriveOutsideForce
from rawgps_common import gps

from boatsim import devices

rospy.init_node('boatsim')

boat_mass=36.2874
boat_lenght=1.78
boat_width=.88
boat_height=.41
port_servo_x_offset=-.7239
port_servo_y_offset=.3048
starboard_servo_x_offset=-.7239
starboard_servo_y_offset=-.3048
friction_coefficient_forward=100.0181
friction_coefficient_forward_reduction=0.76462
friction_coefficient_lateral=200.0
friction_coefficient_lateral_reduction=0.0
friction_coefficient_rotational=100.3321
friction_coefficient_rotational_reduction=0.0

thrusts = {2: 0, 3: 0}
positions = {2: 0, 3: 0}
z_drive_sim = {'force_x': 0.0, 'force_y': 0.0, 'force_z': 0.0, 'torque_r': 0.0, 'torque_p': 0.0, 'torque_y': 0.0}

def zdriveSimCallback(msg):
    z_drive_sim['force_x']=msg.outside_force_x
    z_drive_sim['force_y']=msg.outside_force_y
    z_drive_sim['force_z']=msg.outside_force_z
    z_drive_sim['torque_r']=msg.outside_torque_r
    z_drive_sim['torque_p']=msg.outside_torque_p
    z_drive_sim['torque_y']=msg.outside_torque_y
rospy.Subscriber('z_drive_sim_force', BoatSimZDriveOutsideForce, zdriveSimCallback)
def motorConfigCallback(msg):
    thrusts[msg.id] = msg.thrust
    #so the thrusters dont have to run, just echo the message back
    echo_pub = rospy.Publisher('/thruster_status', thrusterNewtons)
    status_echo_msg=thrusterNewtons()
    status_echo_msg.id=msg.id
    status_echo_msg.thrust=msg.thrust
    echo_pub.publish(status_echo_msg)
rospy.Subscriber('thruster_config', thrusterNewtons, motorConfigCallback)
def dynamixelConfigPositionCallback(msg):
    positions[msg.id] = msg.goal_position
    #so the dynamixel_server doesn't have to run, just echo the message back
    echo_pub = rospy.Publisher('/dynamixel/dynamixel_status_post', DynamixelStatus)
    status_echo_msg=DynamixelStatus()
    status_echo_msg.id=msg.id
    status_echo_msg.present_position=msg.goal_position
    status_echo_msg.goal_position=msg.goal_position
    echo_pub.publish(status_echo_msg)
rospy.Subscriber('dynamixel/dynamixel_config_position', DynamixelJointConfig, dynamixelConfigPositionCallback)
def dynamixelConfigFullCallback(msg):
    positions[msg.id] = msg.goal_position
     #so the dynamixel_server doesn't have to run, just echo the message back
    echo_pub = rospy.Publisher('/dynamixel/dynamixel_status_post', DynamixelStatus)
    status_echo_msg=DynamixelStatus()
    status_echo_msg.id=msg.id
    status_echo_msg.present_position=msg.goal_position
    status_echo_msg.goal_position=msg.goal_position
    echo_pub.publish(status_echo_msg)
rospy.Subscriber('dynamixel/dynamixel_full_config', DynamixelFullConfig, dynamixelConfigFullCallback)


clip = lambda x, (low, high): min(max(x, low), high)

def buoyancy_force(depth, r):    
    inf = 1e1000
    assert math.isinf(inf)
    sphere_antiderivative = lambda h: -h**3*math.pi/3 + h*math.pi*r**2
    sphere_true_antiderivative = lambda h: sphere_antiderivative(clip(h, (-r, r)))
    vol_submerged = sphere_true_antiderivative(depth) - sphere_true_antiderivative(-inf)
    return 1000 * 9.81 * vol_submerged

world, world_time = ode.World(), reactor.seconds()
world.setGravity((0, 0, -9.81))

body = ode.Body(world)
M = ode.Mass()
# this is the mass of the boat "boat_mass", this also sets the inertia based on a box with length_x, length_y, length_z
M.setBoxTotal(boat_mass, boat_lenght, boat_width, boat_height)
body.setMass(M)
body.setPosition((67.4, -39.75, 0))
# the last unit is the initial rotation of the body position in radians
#body.setQuaternion(vector.axisangle_to_quat(v(0, 0, 1), math.pi))
body.setQuaternion(vector.axisangle_to_quat(v(0, 0, 1), 0))

space = ode.HashSpace()

body_geom = ode.GeomBox(space, (boat_lenght, boat_width, boat_height))
body_geom.setBody(body)

lake_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'lake.obj'))
lake_geom = ode.GeomTriMesh(lake_mesh.ode_trimeshdata, space)

def get_water_vel(pos):
    return v(0, 0, 0)
    return (pos % v(0, 0, 1))*math.e**(-pos.mag()/3)

killed = False
locked = False

odom_pub = rospy.Publisher('/odom', Odometry)
abs_odom_pub = rospy.Publisher('absodom', Odometry)
base_tf_br = tf.TransformBroadcaster()

class lidar:
    def __init__(self):
        '''
        This class constitutes a lidar object. 
        
        It is packaged with:
            - Ranging "ray-tracer"
            - Laserscan publisher
            - TF publisher
        
        Future:
            To make it a more generic, useful object
                - Rotation and relative position must be settable
                - Inspiration: 'Threed' camera view
        '''

        ##TODO: This needs to be made more generic for use with sub imaging sonar
        
        self.lidar_pub = rospy.Publisher('/lidar/scan', LaserScan)
        self.lidar_tf_br = tf.TransformBroadcaster()
        self.pitch = 0
        self.pitch_inc = math.radians(1)

    def pitch_lidar(self):
        '''
        pitch_lidar()
        This function pitches the lidar by a preset amount of 2 degrees per tick
        It oscillates between max_pitch and min_pitch
        '''

        max_pitch = math.radians(15)
        min_pitch = math.radians(-10)
        

        if (self.pitch < min_pitch) or (self.pitch > max_pitch):
            self.pitch_inc = -self.pitch_inc 
            #swap directions

        self.pitch += self.pitch_inc

    def send_lidar_transform(self):
        '''
        Publishes a transformation on /base_link/laser
            -> Allows LIDAR data taken at an arbitrary angle (or position) 
                to be viewed from the base_link (The boat body) reference frame.

        Reference code at laser_tf_broadcaster.py in sensors package
        (If you are looking for tf reference code, try grep -r "TransformBroadcaster"
        in the root uf-mil directory)
        '''
        ##TODO: 
        # Clean this up, share tf xyz/pitch with publish/scanner
        bl_lu_x       = 0.8001        # Distance forward, BaseLink to Lidar Unit
        bl_lu_y       = 0             # Distance left, BaseLink to Lidar Unit
        bl_lu_z       = 0.254         # Distance up, BaseLink to Lidar Unit
        lu_r          = 0             # Roll of Lidar Unit
        lu_p          = self.pitch    # Pitch of Lidar Unit
        lu_y          = 0             # Yaw of Lidar Unit

        #Transformation Matrix
        T = tf.transformations.translation_matrix((bl_lu_x, bl_lu_y, bl_lu_z))
        T = tf.transformations.rotation_matrix((lu_y), (0, 0, 1)).dot(T)
        T = tf.transformations.rotation_matrix((lu_p), (0, 1, 0)).dot(T)
        T = tf.transformations.rotation_matrix((lu_r), (1, 0, 0)).dot(T)
        T = tf.transformations.translation_from_matrix(T)

        total_roll = 0
        total_pitch = self.pitch 
        total_yaw = 0
        #So this is not a full simulation of the pivot, etc
        
        lidar_quat = tf.transformations.quaternion_from_euler(total_roll, total_pitch, total_yaw)

        self.lidar_tf_br.sendTransform(
                T,
                lidar_quat,
                rospy.Time.now(),
                "/base_link/laser",
                "/base_link",
                )

    def get_lidar_range(self):
        '''
        get_lidar_range(nothing) -> distances
        
        Behavior:
        
            This function will publish distance to the nearest object,
            in accordance with the current orientation of the dynamixel servos
            It will automatically cull the boat geom from the list of distances
        
        Functionality:
            
            Distances are computed using ode collision space, where the distance is
            the point to point distance between the origin of the ray and the point 
            on the geom that the ray intersects with
        
        Future:
            
            - Variable pitch (Sub on /lidar_angle topic)
            - Fake intensities (Based on distance, no need to go crazy)

        Lidar Simulated Features:
             
            Field of view:                        270 deg
            Scanning frequency:                   25 Hz / 50 Hz    
            Angular resolution:                   0.25 deg 0.5 deg
            Operating range:                      0.5 m to 20 m    
            Max. range with 10 % reflectivity:    18 m    
            Amount of evaluated echoes:           2 (I don't actually simulate this feature yet)
        '''
         
        lidar_FOV = 270 #deg
        lidar_scanrate = 25.0 #hz
        lidar_ang_res = 0.25 #deg
        lidar_range = 20.0
        #lidar_range = 100
        lidar_end_angle = math.radians((lidar_FOV/2.0))
        lidar_start_angle = math.radians(-(lidar_FOV/2.0))

        def publish_lidar(scan_ranges_in):
            self.lidar_pub.publish(
                LaserScan(
                    header = Header(
                        stamp=rospy.Time.now(), 
                        frame_id="/base_link/laser" 
                    ),
                    angle_min = lidar_start_angle,
                    angle_max = lidar_end_angle,
                    angle_increment = math.radians(lidar_ang_res),
                    scan_time = 1.0/lidar_scanrate,
                    range_min = 0.5,
                    range_max = lidar_range,
                    ranges = scan_ranges_in,
                )
            )

        raylength = lidar_range + 0.2*lidar_range
        #Space - ?
        ray = ode.GeomRay(None, raylength)
        # Had to do conversions, couldn't find a metric ruler
        # This vector is the physical offset of the LIDAR module from the center of the boat
        lidar_pos = v(0.8001,0.0,0.254) 

        # Pre-initialize the array
        # Rough experimentation shows that this does save time
        scan_ranges = [None]*int(lidar_FOV/lidar_ang_res)
        #xrange is now the default range function in python 3.x, if you run into porting errors, look here
        for i in xrange(len(scan_ranges)):
            
            projection_angle = math.radians(i*lidar_ang_res) - math.radians(lidar_FOV/2.0)
            
            x_hat = math.cos(projection_angle)
            y_hat = math.sin(projection_angle)
            z_hat = math.sin(self.pitch)
            
            lidar_ray_dir = body.vectorToWorld(v(x_hat, y_hat ,-z_hat))

            ray.set( body.getRelPointPos(lidar_pos), lidar_ray_dir )
            
            closest_distance = 250

            for contact in ode.collide(ray,space):
                stamp = rospy.Time.now()
                pos,normal,dist,geom1,geom2 = contact.getContactGeomParams()
                # Pos = position XYZ
                # Normal = normal vector on collided surface
                # Dist = distance to object
                # Geom1 = the ray (I think?)
                # Geom2 = the detected object geometry
                
                assert geom1 is ray, geom1
                #The purpose of the below (was) to not hit the water, but that doesn't work.
                #if (geom2 is  not lake_geom):
                #    continue
                valid_distance =  (V(pos) - V(body.getRelPointPos(lidar_pos))).mag()
                #There's no guarantee that they'll come in order, apparently.
                #Maybe play with hash space settings? Is that a things?
                if(valid_distance < closest_distance):
                    closest_distance = valid_distance

            scan_ranges[i] = closest_distance

        self.send_lidar_transform()
        publish_lidar(scan_ranges)
        #self.pitch_lidar()

#Instantiate a "Lidar"
boat_lidar = lidar()

def world_tick():
    global world_time
    
    #print positions, thrusts, z_drive_sim
    
    if random.randrange(10) == 0:
      boat_lidar.get_lidar_range() # Use and publish whoa!

    water_vel = get_water_vel(V(body.getPosition()))
    
    body.addForceAtRelPos((0, 0, buoyancy_force(-body.getPosition()[2], 0.22728849402137372)), (0, 0, .1))
    # the following frictional forces are from darsen's models
    #frictional force opposite to the velocity of the boat
    body_velocity=body.vectorFromWorld(body.getLinearVel())
    # adds a resistance force for the water proportional to the velocity (where [0] is x, [1] is y, and [2] is z). units in N/(m/s)
    friction_force_forward=friction_coefficient_forward*body_velocity[0]-friction_coefficient_forward_reduction*(-1.0*pow(body_velocity[0],2) if body_velocity[0]<0.0 else pow(body_velocity[0],2))
    friction_force_lateral=friction_coefficient_lateral*body_velocity[1]-friction_coefficient_lateral_reduction*(-1.0*pow(body_velocity[1],2) if body_velocity[1]<0.0 else pow(body_velocity[1],2))
    body.addRelForce([-friction_force_forward,-friction_force_lateral,body_velocity[2]*-40])
    # adds a angular resistance force for the water proportional to the velocity
    # angular_velocity is a 3-tuple ([0]=roll,[1]=pitch,[2]=yaw)
    angular_velocity=body.vectorFromWorld(body.getAngularVel())
    friction_force_roll=friction_coefficient_rotational*angular_velocity[0]-friction_coefficient_rotational_reduction*(-1.0*pow(angular_velocity[0],2) if angular_velocity[0]<0.0 else pow(angular_velocity[0],2))
    friction_force_pitch=friction_coefficient_rotational*angular_velocity[1]-friction_coefficient_rotational_reduction*(-1.0*pow(angular_velocity[1],2) if angular_velocity[1]<0.0 else pow(angular_velocity[1],2))
    friction_force_yaw=friction_coefficient_rotational*angular_velocity[2]-friction_coefficient_rotational_reduction*(-1.0*pow(angular_velocity[2],2) if angular_velocity[2]<0.0 else pow(angular_velocity[2],2))
    body.addRelTorque([-friction_force_roll,-friction_force_pitch,-friction_force_yaw])
    print "forward: ", friction_force_forward, " lateral: ", friction_force_lateral, " rotational: ", -friction_force_yaw
    #print thrusters
    # map the thrusters position on the boat
    sub_model.vectors = []
    # id2=starboard, id3=port
    if not killed:
        for thruster_id in [2, 3]:
            # set the thrusters position on the boat
            relpos = v(starboard_servo_x_offset, starboard_servo_y_offset, 0) if thruster_id == 2 else v(port_servo_x_offset, port_servo_y_offset, 0)
            angle = (positions[thruster_id]-math.pi)/2
            reldir = v(math.cos(angle), math.sin(angle), 0)
            force = thrusts[thruster_id]
            body.addRelForceAtRelPos(reldir*force, relpos)
            sub_model.vectors.append((relpos, relpos - .02*reldir*force))
            print "force: ", force, " angle: ", angle
        body.addRelTorque([z_drive_sim['torque_r'],z_drive_sim['torque_p'],z_drive_sim['torque_y']])
        body.addRelForce([z_drive_sim['force_x'],z_drive_sim['force_y'],z_drive_sim['force_z']])
    
    keys = pygame.key.get_pressed()
    for keycode, force in [
        (pygame.K_k, v(-50, 0, 0)),
        (pygame.K_i, v(+50, 0, 0)),
        (pygame.K_j, v(0, +50, 0)),
        (pygame.K_l, v(0, -50, 0)),
        (pygame.K_o, v(0, 0, +50)),
        (pygame.K_m, v(0, 0, -50)),
    ]:
        if keys[keycode]:
            body.addRelForce(force*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    for keycode, torque in [
        (pygame.K_COMMA, v(-20, 0, 0)),
        (pygame.K_u, v(+20, 0, 0)),
        (pygame.K_h, v(0, +20, 0)),
        (pygame.K_SEMICOLON, v(0, -20, 0)),
        (pygame.K_0, v(0, 0, +20)),
        (pygame.K_n, v(0, 0, -20)),
    ]:
        if keys[keycode]:
            body.addRelTorque(torque*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    
    global killed
    if keys[pygame.K_1]:
        killed = True
    if keys[pygame.K_2]:
        killed = False
    global locked
    if keys[pygame.K_3]:
        locked = True
    if keys[pygame.K_4]:
        locked = False
    
    contactgroup = ode.JointGroup()
    
    if locked:
        j = ode.FixedJoint(world, contactgroup)
        j.attach(body, None)
        j.setFixed()
    
    near_pairs = []
    space.collide(None, lambda _, geom1, geom2: near_pairs.append((geom1, geom2)))
    for geom1, geom2 in near_pairs:
        for contact in ode.collide(geom1, geom2):
            contact.setBounce(0.2)
            contact.setMu(5000)
            j = ode.ContactJoint(world, contactgroup, contact)
            j.attach(geom1.getBody(), geom2.getBody())
    
    dt = 1/30
    world.step(dt)
    world_time += dt
    
    contactgroup.empty()
    
    msg = Odometry()
    msg.header.stamp = rospy.Time(world_time)
    msg.header.frame_id = '/enu'
    msg.child_frame_id = '/base_link'
    msg.pose.pose.position = Point(*body.getPosition())
    q = V(body.getQuaternion())
    msg.pose.pose.orientation = Quaternion(q[1], q[2], q[3], q[0])
   
    msg.twist.twist.linear = Vector3(*q.conj().quat_rot(body.getLinearVel()))
    msg.twist.twist.angular = Vector3(*q.conj().quat_rot(body.getAngularVel()))
    odom_pub.publish(msg)
    
    # XXX
    msg = Odometry()
    msg.header.stamp = rospy.Time(world_time)
    msg.header.frame_id = '/ecef'
    msg.child_frame_id = '/base_link'
    ecef_loc = gps.ecef_from_latlongheight(math.radians(36.802002), math.radians(-76.191019), 7)
    enu_loc = numpy.array([53.6686215007, -20.8502282916, -0.0733864689281])
    msg.pose.pose.position = Point(*gps.ecef_from_enu(enu_v=body.getPosition() - enu_loc, ecef_pos=ecef_loc) + ecef_loc)
    abs_odom_pub.publish(msg)
    
    reactor.callLater(max(0, world_time + dt - reactor.seconds()), world_tick)



class Boat(object):
    is_base_link = True
    
    def __init__(self, body, is_killed_func):
        self.body = body
        self.is_killed_func = is_killed_func
        self.vectors = []
    
    def draw(self):
        with threed.GLMatrix:
            threed.rotate_to_body(self.body)
            
            q = gluNewQuadric()
            with threed.GLMatrix:
                glTranslate(+.2, 0, 0)
                glColor3f(0, 1, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(-.2, 0, 0)
                glColor3f(1, 0, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, -.2, +.3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, +.2, +.3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(0, 0, +.5)
                if self.is_killed_func():
                    glColor3f(1, 0, 0)
                else:
                    glColor3f(0, 1, 0)
                gluSphere(q, 0.1, 20, 10)
            
            glDisable(GL_DEPTH_TEST)
            glBegin(GL_LINES)
            for start, end in self.vectors:
                glColor3f(0, 0, 0)
                glVertex3f(*start)
                glColor3f(1, 1, 1)
                glVertex3f(*end)
            glEnd()
            glEnable(GL_DEPTH_TEST)
            

def generate_buoy_pair(world, pos,angle):
    
    channel_gap = 2
    green_pos = (pos[0] + math.cos(math.radians(angle))*(channel_gap/2.),pos[1] + math.sin(math.radians(angle))*(channel_gap/2.))
    red_pos = (pos[0] - math.cos(math.radians(angle))*(channel_gap/2.),pos[1] - math.sin(math.radians(angle))*(channel_gap/2.))
    
    world.objs.append(Buoys(v(green_pos[0], green_pos[1], 0),(0,1,0), .2))
    world.objs.append(Buoys(v(red_pos[0], red_pos[1], 0),(1,0,0), .2))
    world.objs.append(Buoys(v(-1, 5, 0),(1,0,0), .2)) #red
    world.objs.append(Buoys(v(-4, 4, 0),(1,1,1), .2))
    world.objs.append(Buoys(v(-7, 3, 0),(1,1,1), .2))
    world.objs.append(Buoys(v(-10, 2, 0),(0,1,0), .2)) #greeen

    world.objs.append(Buoys(v(-5, 15, 0),(1,0,0), .2)) #red
    world.objs.append(Buoys(v(-8, 14, 0),(1,1,1), .2))
    world.objs.append(Buoys(v(-11, 13, 0),(1,1,1), .2))
    world.objs.append(Buoys(v(-14, 12, 0),(0,1,0), .2)) #greeen

    for i in xrange(2):
	xrand = random.uniform(-1, -14)
	yrand = random.uniform(5, 12)
	world.objs.append(Buoys(v(xrand, yrand, 0),(1,1,0), .1))

    for i in xrange(2):
	xrand = random.uniform(-1, -14)
	yrand = random.uniform(5, 12)
	world.objs.append(Buoys(v(xrand, yrand, 0),(0,0,0), .1))
   
class Buoys(object):
    def __init__(self, pos,color,size):
       global buoy_array
       #self.buoys = [(pos + [random.gauss(0, 5), random.gauss(0, 5), 0], color) for i in xrange(10) for color in [(1, 0, 0), (0, 1, 0),(0,0,1)]]
       #self.buoys = [(pos + [i*3,0,0],(i,1-i,0)) for i in xrange(2)]
       self.buoys = [pos,color,size] 
    def draw(self):
        q = gluNewQuadric()
        #for pos, color, size in self.buoys:
        with threed.GLMatrix:
            glTranslate(*self.buoys[0])
            glColor3f(*self.buoys[1])
            gluSphere(q, self.buoys[2], 30, 15)

w = threed.World()

w.objs.append(lake_mesh)
sub_model = Boat(body, lambda: killed)
w.objs.append(sub_model)
w.objs.append(threed.VectorField(get_water_vel))
generate_buoy_pair(w, (2,1),0)
generate_buoy_pair(w, (10,5),15)
generate_buoy_pair(w, (15,10),60)

'''
i.objs.append(Buoys(v(-1, 5, 0)))
i.objs.append(Buoys(v(-5, 10, 0)))
i.objs.append(Buoys(v(-2, 15, 0)))
'''
def set_forward_view():
    glTranslate(-1, 0, -1)
    threed.rotate_to_body(body, inv=True)
c1 = threed.Camera(w, "forward_camera", set_forward_view, body, fovy=90)

#-> Add correct offsets
def q_from_yaw(yaw_deg):
    return vector.axisangle_to_quat(v(0, 0, 1), math.radians(yaw_deg))
def rpy(r, p, y):
    return vector.axisangle_to_quat(v(0, 0, 1), math.radians(y)) % vector.axisangle_to_quat(v(0, 1, 0), math.radians(p)) % vector.axisangle_to_quat(v(1, 0, 0), math.radians(r))

_geoms = []
for pos in [
  v(5, 5, 0),
  v(54.5, -33.9, 0),
  v(53.5, -37.4, 0),
  v(38.0, -29.6, 0),
  v(35.7, -33.5, 0),
]:
  newbuoy_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'green_buoy.obj'))
  newbuoy_mesh = newbuoy_mesh.translate(pos)
  w.objs.append(newbuoy_mesh)
  _geoms.append(ode.GeomTriMesh(newbuoy_mesh.ode_trimeshdata, space))

cruciform_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'cruciform.obj'))
cruciform_mesh = cruciform_mesh.rotate(rpy(0, random.uniform(-30, 30), 45+180 + random.uniform(-30, 30))).translate((23, 2, 1))
w.objs.append(cruciform_mesh)
cruciform_geom = ode.GeomTriMesh(cruciform_mesh.ode_trimeshdata, space)

circle_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'circle.obj'))
circle_mesh = circle_mesh.rotate(rpy(0, random.uniform(-30, 30), 45+180 + random.uniform(-30, 30))).translate((25, 0, 1))
w.objs.append(circle_mesh)
circle_geom = ode.GeomTriMesh(circle_mesh.ode_trimeshdata, space)

triangle_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'triangle.obj'))
triangle_mesh = triangle_mesh.rotate(rpy(0, random.uniform(-30, 30), 45+180 + random.uniform(-30, 30))).translate((24, 1, 1))
w.objs.append(triangle_mesh)
triangle_geom = ode.GeomTriMesh(triangle_mesh.ode_trimeshdata, space)

i = threed.Interface()
i.init(w)
def _():
    try:
        i.step()
        c1.step()
    except:
        traceback.print_exc()
        reactor.stop()
reactor.callWhenRunning(task.LoopingCall(_).start, 1/24)

reactor.callWhenRunning(world_tick)

reactor.callWhenRunning(lambda: rospy.core.add_client_shutdown_hook(lambda reason=None: reactor.callFromThread(reactor.stop)))
reactor.run()
