#!/usr/bin/env python

from __future__ import division

import math
import random
import traceback
import rospy

import ode
import pygame
from OpenGL.GL import *
from OpenGL.GLU import *
from twisted.internet import protocol, reactor, task

import roslib
roslib.load_manifest('boatsim')
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Vector3, Quaternion


from sim import threed, vector, util
from sim.vector import v, V

from boatsim import devices

rospy.init_node('boatsim')

'''
from visualization_msgs.msg import MarkerArray,Marker
global bouy_array
bouy_publisher=rospy.Publisher('bouys',MarkerArray)
bouy_array=MarkerArray()
'''

thrusters = [0]*4


clip = lambda x, (low, high): min(max(x, low), high)

def buoyancy_force(depth, r):    
    inf = 1e1000
    assert math.isinf(inf)
    sphere_antiderivative = lambda h: -h**3*math.pi/3 + h*math.pi*r**2
    sphere_true_antiderivative = lambda h: sphere_antiderivative(clip(h, (-r, r)))
    vol_submerged = sphere_true_antiderivative(depth) - sphere_true_antiderivative(-inf)
    return 1000 * 9.81 * vol_submerged

world, world_time = ode.World(), reactor.seconds()
world.setGravity((0, 0, -9.81))

body = ode.Body(world)
M = ode.Mass()
M.setBoxTotal(47, 1.27, .46, .46)
body.setMass(M)
body.setPosition((0, 0, 0))
body.setQuaternion(vector.axisangle_to_quat(v(0, 0, 1), math.pi/2))

space = ode.HashSpace()

body_geom = ode.GeomBox(space, (1.27, .46, .46))
body_geom.setBody(body)

pool_mesh = threed.mesh_from_obj(open(roslib.packages.resource_file('boatsim', 'scene', 'pool6.obj')))
pool_geom = ode.GeomTriMesh(pool_mesh.ode_trimeshdata, space)

def get_water_vel(pos):
    return v(0, 0, 0)
    return (pos % v(0, 0, 1))*math.e**(-pos.mag()/3)

killed = False
locked = False

odom_pub = rospy.Publisher('/sim_odom', Odometry)

def world_tick():
    global world_time
    
    water_vel = get_water_vel(V(body.getPosition()))
    
    body.addForceAtRelPos((0, 0, buoyancy_force(-body.getPosition()[2], 0.22728849402137372)), (0, 0, .1))
    body.addForce(-(40 if body.getPosition()[2] >= 0 else 10) * (V(body.getLinearVel())-water_vel))
    #body.addForce([random.gauss(0, 1) for i in xrange(3)])
    #body.addTorque([random.gauss(0, 10) for i in xrange(3)])
    body.addTorque(-(20 if body.getPosition()[2] >= 0 else 5) * V(body.getAngularVel()))
    
    #print thrusters
    
    sub_model.vectors = []
    thruster_angle = math.radians(30)
    #print thrusters
    for i, (reldir, relpos, fwdforce, revforce) in enumerate([
        (v(math.cos(thruster_angle), math.sin(thruster_angle), 0), v(.729401, -.23495, -.241308), 100, 100), # FR
        (v(math.cos(thruster_angle), -math.sin(thruster_angle), 0), v(.729401,.23495,-.241308), 100, 100), # FL
        (v(math.cos(thruster_angle), -math.sin(thruster_angle), 0), v(-.821269,-.23495,-.241308), 100, 100), # BR
        (v(math.cos(thruster_angle), math.sin(thruster_angle), 0), v(-.821269,.23495,-.241308), 100, 100), # BL
    ]):
        body.addRelForceAtRelPos(reldir*thrusters[i]*(fwdforce if thrusters[i] > 0 else revforce), relpos)
        sub_model.vectors.append((relpos, relpos - .02*reldir*thrusters[i]*(fwdforce if thrusters[i] > 0 else revforce)))
    
    keys = pygame.key.get_pressed()
    for keycode, force in [
        (pygame.K_k, v(-50, 0, 0)),
        (pygame.K_i, v(+50, 0, 0)),
        (pygame.K_j, v(0, +50, 0)),
        (pygame.K_l, v(0, -50, 0)),
        (pygame.K_o, v(0, 0, +50)),
        (pygame.K_m, v(0, 0, -50)),
    ]:
        if keys[keycode]:
            body.addRelForce(force*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    for keycode, torque in [
        (pygame.K_COMMA, v(-20, 0, 0)),
        (pygame.K_u, v(+20, 0, 0)),
        (pygame.K_h, v(0, +20, 0)),
        (pygame.K_SEMICOLON, v(0, -20, 0)),
        (pygame.K_0, v(0, 0, +20)),
        (pygame.K_n, v(0, 0, -20)),
    ]:
        if keys[keycode]:
            body.addRelTorque(torque*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    
    global killed
    if keys[pygame.K_1]:
        killed = True
    if keys[pygame.K_2]:
        killed = False
    global locked
    if keys[pygame.K_3]:
        locked = True
    if keys[pygame.K_4]:
        locked = False
    
    contactgroup = ode.JointGroup()
    
    if locked:
        j = ode.FixedJoint(world, contactgroup)
        j.attach(body, None)
        j.setFixed()
    
    near_pairs = []
    space.collide(None, lambda _, geom1, geom2: near_pairs.append((geom1, geom2)))
    for geom1, geom2 in near_pairs:
        for contact in ode.collide(geom1, geom2):
            contact.setBounce(0.2)
            contact.setMu(5000)
            j = ode.ContactJoint(world, contactgroup, contact)
            j.attach(geom1.getBody(), geom2.getBody())
    
    dt = 1/30
    world.step(dt)
    world_time += dt
    
    contactgroup.empty()
    
    msg = Odometry()
    msg.header.stamp = rospy.Time(world_time)
    msg.header.frame_id = '/simmap'
    msg.child_frame_id = '/base_link'
    msg.pose.pose.position = Point(*body.getPosition())
    q = V(body.getQuaternion())
    msg.pose.pose.orientation = Quaternion(q[1], q[2], q[3], q[0])
    msg.twist.twist.linear = Vector3(*q.conj().quat_rot(body.getLinearVel()))
    msg.twist.twist.angular = Vector3(*q.conj().quat_rot(body.getAngularVel()))
    odom_pub.publish(msg)
    
    
    reactor.callLater(max(0, world_time + dt - reactor.seconds()), world_tick)

for i in xrange(4):
    reactor.listenTCP(10030 + i, util.AutoServerFactory(devices.ThrusterProtocol, i, thrusters))



class Boat(object):
    is_base_link = True
    
    def __init__(self, body, is_killed_func):
        self.body = body
        self.is_killed_func = is_killed_func
        self.vectors = []
    
    def draw(self):
        with threed.GLMatrix:
            threed.rotate_to_body(self.body)
            
            q = gluNewQuadric()
            with threed.GLMatrix:
                glTranslate(+.2, 0, 0)
                glColor3f(0, 1, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(-.2, 0, 0)
                glColor3f(1, 0, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, -.2, +.3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, +.2, +.3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(0, 0, +.5)
                if self.is_killed_func():
                    glColor3f(1, 0, 0)
                else:
                    glColor3f(0, 1, 0)
                gluSphere(q, 0.1, 20, 10)
            
            glDisable(GL_DEPTH_TEST)
            glBegin(GL_LINES)
            for start, end in self.vectors:
                glColor3f(0, 0, 0)
                glVertex3f(*start)
                glColor3f(1, 1, 1)
                glVertex3f(*end)
            glEnd()
            glEnable(GL_DEPTH_TEST)
            

def generate_bouy_pair(world, pos,angle):
    
    channel_gap = 2
    green_pos = (pos[0] + math.cos(math.radians(angle))*(channel_gap/2.),pos[1] + math.sin(math.radians(angle))*(channel_gap/2.))
    red_pos = (pos[0] - math.cos(math.radians(angle))*(channel_gap/2.),pos[1] - math.sin(math.radians(angle))*(channel_gap/2.))
    
    world.objs.append(Buoys(v(green_pos[0], green_pos[1], 0),(0,1,0)))
    world.objs.append(Buoys(v(red_pos[0], red_pos[1], 0),(1,0,0)))
   
class Buoys(object):
    def __init__(self, pos,color):
       global bouy_array
       #self.buoys = [(pos + [random.gauss(0, 5), random.gauss(0, 5), 0], color) for i in xrange(10) for color in [(1, 0, 0), (0, 1, 0),(0,0,1)]]
       #self.buoys = [(pos + [i*3,0,0],(i,1-i,0)) for i in xrange(2)]
       self.bouys = [pos,color]
    
    def draw(self):
        q = gluNewQuadric()
        #for pos, color in self.buoys:
        with threed.GLMatrix:
            glTranslate(*self.bouys[0])
            glColor3f(*self.bouys[1])
            gluSphere(q, .2, 30, 15)

w = threed.World()

w.objs.append(threed.MeshDrawer(pool_mesh, (.4, .4, .4)))
sub_model = Boat(body, lambda: killed)
w.objs.append(sub_model)
w.objs.append(threed.VectorField(get_water_vel))
generate_bouy_pair(w, (2,1),0)
generate_bouy_pair(w, (10,5),15)
generate_bouy_pair(w, (15,10),60)

'''
i.objs.append(Buoys(v(-1, 5, 0)))
i.objs.append(Buoys(v(-5, 10, 0)))
i.objs.append(Buoys(v(-2, 15, 0)))
'''

i = threed.Interface()
i.init(w)
def _():
    try:
        i.step()
    except:
        traceback.print_exc()
        reactor.stop()
reactor.callWhenRunning(task.LoopingCall(_).start, 1/24)

reactor.callWhenRunning(world_tick)

reactor.callWhenRunning(lambda: rospy.core.add_client_shutdown_hook(lambda reason=None: reactor.callFromThread(reactor.stop)))
reactor.run()
